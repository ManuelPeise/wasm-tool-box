// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231212131411_SeedDefaultUserData")]
    partial class SeedDefaultUserData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Models.Entities.Log.LogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ÊxMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Data.Models.Entities.Settings.SettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("JsonValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SettingsType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Data.Models.Entities.User.AppUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("CredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("FailedLogins")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CredentialsId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(6797),
                            CreatedBy = "System",
                            CredentialsId = 1,
                            Email = "admin@devtools.com",
                            FailedLogins = 0,
                            FirstName = "",
                            IsActive = true,
                            LastName = "",
                            UpdatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(6797),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Models.Entities.User.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5626),
                            CreatedBy = "System",
                            Description = "Role: Admin",
                            Name = "Admin",
                            UpdatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5626),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5626),
                            CreatedBy = "System",
                            Description = "Role: User",
                            Name = "User",
                            UpdatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5626),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Models.Entities.User.UserCredentialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpieresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5994),
                            CreatedBy = "System",
                            ExpieresAt = new DateTime(2024, 3, 11, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5994),
                            Password = "UEBzc3dvcmRlYmIxN2RlZi1hZjY1LTQxOTItOTczNC1jN2NhMjI1MTk4NDc=",
                            Salt = "ebb17def-af65-4192-9734-c7ca22519847",
                            Token = "",
                            UpdatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(5994),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Models.Entities.User.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AppuserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppuserId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppuserId = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(7144),
                            CreatedBy = "System",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2023, 12, 12, 13, 14, 11, 425, DateTimeKind.Utc).AddTicks(7144),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Models.Entities.User.AppUserEntity", b =>
                {
                    b.HasOne("Data.Models.Entities.User.UserCredentialEntity", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsId");

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Data.Models.Entities.User.UserRoleEntity", b =>
                {
                    b.HasOne("Data.Models.Entities.User.AppUserEntity", "Appuser")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppuserId");

                    b.HasOne("Data.Models.Entities.User.RoleEntity", "Role")
                        .WithOne("UserRole")
                        .HasForeignKey("Data.Models.Entities.User.UserRoleEntity", "RoleId");

                    b.Navigation("Appuser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Models.Entities.User.AppUserEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Data.Models.Entities.User.RoleEntity", b =>
                {
                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
